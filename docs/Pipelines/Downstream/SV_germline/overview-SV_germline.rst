======================
Overview - SV Germline
======================

The CGAP Pipeline for Germline Structural Variants (SVs) (https://github.com/dbmi-bgm/cgap-pipeline-SV-germline) identifies, annotates, and filters SVs starting from short read sequencing alignment files (``bam``) and produces ``vcf`` files as output. SVs are a class of large genomic variants that includes deletions, duplications, translocations, inversions and other complex events, generally with a size of 50 bp or longer.

The pipeline is mostly based on ``Manta`` (https://github.com/Illumina/manta), ``ensembl-vep`` (https://github.com/Ensembl/ensembl-vep), ``sansa`` (https://github.com/dellytools/sansa), and ``granite`` (https://github.com/dbmi-bgm/granite).

The CGAP Pipeline SV Germline is designed for proband-only or trio analysis, with the proband diagnosed with a likely monogenic disease. It can receive the initial analysis ready ``bam`` file(s) from either of the `WGS Upstream pipelines <https://cgap-pipeline-main.readthedocs.io/en/latest/Pipelines/Upstream/Upstream_pipelines.html>`_.

**Note**: CGAP Pipeline SV Germline is not optimized for Whole Exome Sequencing (WES) data. Also, if the user is providing their own ``bam`` file(s) as input, the ``bam`` file(s) must be mapped to **hg38**.

For proband-only analysis, a single ``bam`` file is provided to ``Manta`` and ``Single Diploid Sample Analysis`` is carried out, resulting in a ``vcf`` file containing SVs with genotypes for the proband. For trio analysis, three ``bam`` files are provided to ``Manta`` and ``Joint Diploid Sample Analysis`` is carried out, resulting in a single ``vcf`` file containing SVs with genotypes for all three individuals.

The pipeline then performs annotation and filtering of SVs from that ``vcf`` file. ``vcf`` files are checked for integrity using ``vcftools`` ``vcf-validator`` at the end of any step during which they are created or modified.


Docker Images
#############

The Dockerfiles provided in this GitHub repository can be used to build public docker images, or if built through ``cgap-pipeline-utils`` ``deploy_pipeline.py`` (https://github.com/dbmi-bgm/cgap-pipeline-utils), private ECR images will be created for the provided AWS account.

The ``manta`` image is primarily for **SV identification**. This image contains (but is not limited to) the following software packages:

- manta (1.6.0)
- samtools (1.7)
- bcftools (1.9)
- vcftools (0.1.17)

The ``sv_germline`` image is for **annotation and filtering of SVs**. This image contains (but is not limited to) the following software packages:

- granite (0.1.13)
- bcftools (1.11)
- vep (101)
- sansa (0.0.8, a30e1a7)
- vcftools (0.1.17, 954e607)


Pipeline Flow and Runtimes
##########################

The overall flow and duration of the CGAP SV Germline Pipeline is shown below:

.. image:: ../../../images/cgap-SV-pipeline-v2.png


Pipeline Parts
##############

Largely, the pipeline consists of three parts:

  | Part 1. Beginning from analysis ready ``bam`` file(s) generated by either of the available ``upstream pipelines`` of the `WGS Upstream pipelines <https://cgap-pipeline-main.readthedocs.io/en/latest/Pipelines/Upstream/Upstream_pipelines.html>`_, or provided by the user, SVs are identified using ``Manta``.
  | Part 2. Annotation of SVs with ``VEP`` for transcripts and ``sansa`` for gnomAD-SV allele frequencies.
  | Part 3. Filtering of SVs to remove non-relevant variants, false positives, common variants, and very long variants.


Pipeline Steps
##############

.. toctree::
   :maxdepth: 4

   Pages/SV_germline-step-part-1
   Pages/SV_germline-step-part-2
   Pages/SV_germline-step-part-3
